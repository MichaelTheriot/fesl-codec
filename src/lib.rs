//#![deny(warnings, missing_docs, missing_debug_implementations)]
//#![crate_name = "fesl_codec"]

#[macro_use] extern crate enum_primitive_derive;

extern crate num_traits;

pub mod fesl;
pub mod gamespy;

#[cfg(test)]
mod tests {
    use super::fesl::*;

    #[test]
    fn it_parses() {
        let mut src: &[u8] = &[0x66, 0x73, 0x79, 0x73, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x54, 0x58, 0x4e, 0x3d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x0a, 0x73, 0x6b, 0x75, 0x3d, 0x31, 0x38, 0x32, 0x39, 0x38, 0x33, 0x31, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x3d, 0x65, 0x6e, 0x5f, 0x55, 0x53, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3d, 0x50, 0x43, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x31, 0x2e, 0x31, 0x0a, 0x53, 0x44, 0x4b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x33, 0x2e, 0x35, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x39, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x2e, 0x30, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x3d, 0x38, 0x30, 0x39, 0x36, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x00];
        let msg = FeslMessage::from_read(&mut src).unwrap();

        assert_eq!(msg.get_cmd().unwrap(), "fsys");
        assert_eq!(msg.get_type().unwrap(), FeslMessageType::SingleClient);
        assert_eq!(msg.get_id(), 1);

        let mut iter = msg.into_iter();

        assert_eq!(iter.next().unwrap().unwrap(), ("TXN", "Hello"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientString", "mohair-pc"));
        assert_eq!(iter.next().unwrap().unwrap(), ("sku", "1829831"));
        assert_eq!(iter.next().unwrap().unwrap(), ("locale", "en_US"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientPlatform", "PC"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientVersion", "1.1"));
        assert_eq!(iter.next().unwrap().unwrap(), ("SDKVersion", "3.5.2.0.9"));
        assert_eq!(iter.next().unwrap().unwrap(), ("protocolVersion", "2.0"));
        assert_eq!(iter.next().unwrap().unwrap(), ("fragmentSize", "8096"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientType", "server"));
        assert_eq!(iter.next().is_none(), true);
        assert_eq!(iter.next().is_none(), true);
    }

    #[test]
    fn it_stops_iter_on_error() {
        let mut src: &[u8] = &[0x66, 0x73, 0x79, 0x73, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x54, 0x58, 0x4e, 0x3d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x0a, 0x73, 0x6b, 0x75, 0x3d, 0x31, 0x38, 0x32, 0x39, 0x38, 0x33, 0x31, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x3d, 0x65, 0x6e, 0x5f, 0x55, 0x53, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3d, 0x50, 0x43, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x31, 0x2e, 0x31, 0x0a, 0x53, 0x44, 0x4b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x33, 0x2e, 0x35, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x39, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0xff, 0x6f, 0x6e, 0x3d, 0x32, 0x2e, 0x30, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x3d, 0x38, 0x30, 0x39, 0x36, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x00];
        let msg = FeslMessage::from_read(&mut src).unwrap();

        assert_eq!(msg.get_cmd().unwrap(), "fsys");
        assert_eq!(msg.get_type().unwrap(), FeslMessageType::SingleClient);
        assert_eq!(msg.get_id(), 1);

        let mut iter = msg.into_iter();

        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        assert_eq!(iter.next().unwrap().unwrap(), ("SDKVersion", "3.5.2.0.9"));
        assert_eq!(iter.next().unwrap().is_err(), true);
        assert_eq!(iter.next().is_none(), true);
        assert_eq!(iter.next().is_none(), true);
    }

    #[test]
    fn it_errors_on_invalid_terminator() {
        let mut src: &[u8] = &[0x66, 0x73, 0x79, 0x73, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x54, 0x58, 0x4e, 0x3d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x0a, 0x73, 0x6b, 0x75, 0x3d, 0x31, 0x38, 0x32, 0x39, 0x38, 0x33, 0x31, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x3d, 0x65, 0x6e, 0x5f, 0x55, 0x53, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3d, 0x50, 0x43, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x31, 0x2e, 0x31, 0x0a, 0x53, 0x44, 0x4b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x33, 0x2e, 0x35, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x39, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x2e, 0x30, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x3d, 0x38, 0x30, 0x39, 0x36, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x01];
        let msg = FeslMessage::from_read(&mut src).unwrap();

        assert_eq!(msg.get_cmd().unwrap(), "fsys");
        assert_eq!(msg.get_type().unwrap(), FeslMessageType::SingleClient);
        assert_eq!(msg.get_id(), 1);

        let mut iter = msg.into_iter();

        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        iter.next();
        assert_eq!(iter.next().unwrap().unwrap(), ("clientType", "server"));
        assert_eq!(iter.next().unwrap().is_err(), true);
        assert_eq!(iter.next().is_none(), true);
        assert_eq!(iter.next().is_none(), true);
    }

    #[test]
    fn it_bytes_correctly() {
        let mut src: &[u8] = &[0x66, 0x73, 0x79, 0x73, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x54, 0x58, 0x4e, 0x3d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x0a, 0x73, 0x6b, 0x75, 0x3d, 0x31, 0x38, 0x32, 0x39, 0x38, 0x33, 0x31, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x3d, 0x65, 0x6e, 0x5f, 0x55, 0x53, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3d, 0x50, 0x43, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x31, 0x2e, 0x31, 0x0a, 0x53, 0x44, 0x4b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x33, 0x2e, 0x35, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x39, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x2e, 0x30, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x3d, 0x38, 0x30, 0x39, 0x36, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x00];
        let msg = FeslMessage::from_read(&mut src).unwrap();

        let msg = FeslMessage::from_read(&mut msg.as_bytes()).unwrap();

        assert_eq!(msg.get_cmd().unwrap(), "fsys");
        assert_eq!(msg.get_type().unwrap(), FeslMessageType::SingleClient);
        assert_eq!(msg.get_id(), 1);

        let mut iter = msg.into_iter();

        assert_eq!(iter.next().unwrap().unwrap(), ("TXN", "Hello"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientString", "mohair-pc"));
        assert_eq!(iter.next().unwrap().unwrap(), ("sku", "1829831"));
        assert_eq!(iter.next().unwrap().unwrap(), ("locale", "en_US"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientPlatform", "PC"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientVersion", "1.1"));
        assert_eq!(iter.next().unwrap().unwrap(), ("SDKVersion", "3.5.2.0.9"));
        assert_eq!(iter.next().unwrap().unwrap(), ("protocolVersion", "2.0"));
        assert_eq!(iter.next().unwrap().unwrap(), ("fragmentSize", "8096"));
        assert_eq!(iter.next().unwrap().unwrap(), ("clientType", "server"));
        assert_eq!(iter.next().is_none(), true);
        assert_eq!(iter.next().is_none(), true);
    }

    #[test]
    #[should_panic]
    fn it_panics_on_build_with_bad_cmd() {
        let bad_cmd = "abcde"; // should be 4 chars
        FeslMessageBuilder::new(bad_cmd, FeslMessageType::SingleClient, 0);
    }

    #[test]
    fn it_builds_correctly() {
        let mut src: &[u8] = &[0x66, 0x73, 0x79, 0x73, 0xc0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x54, 0x58, 0x4e, 0x3d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x0a, 0x73, 0x6b, 0x75, 0x3d, 0x31, 0x38, 0x32, 0x39, 0x38, 0x33, 0x31, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x3d, 0x65, 0x6e, 0x5f, 0x55, 0x53, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3d, 0x50, 0x43, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x31, 0x2e, 0x31, 0x0a, 0x53, 0x44, 0x4b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x33, 0x2e, 0x35, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x39, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x2e, 0x30, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x3d, 0x38, 0x30, 0x39, 0x36, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x00];
        let msg = FeslMessage::from_read(&mut src).unwrap();

        let mut msg_builder = FeslMessageBuilder::new(
            msg.get_cmd().unwrap(),
            msg.get_type().unwrap(),
            msg.get_id()
        );

        for item in &msg {
            match item {
                Ok((key, value)) => msg_builder.push(&key, &value),
                Err(_) => panic!("Error during iteration")
            }
        }

        let msg_clone = msg_builder.build();
        assert_eq!(msg.as_bytes(), msg_clone.as_bytes());
    }

    #[test]
    fn it_verifies_types() {
        let mut src: &[u8] = &[0x66, 0x73, 0x79, 0x73, 0xa0, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x54, 0x58, 0x4e, 0x3d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3d, 0x6d, 0x6f, 0x68, 0x61, 0x69, 0x72, 0x2d, 0x70, 0x63, 0x0a, 0x73, 0x6b, 0x75, 0x3d, 0x31, 0x38, 0x32, 0x39, 0x38, 0x33, 0x31, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x3d, 0x65, 0x6e, 0x5f, 0x55, 0x53, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x3d, 0x50, 0x43, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x31, 0x2e, 0x31, 0x0a, 0x53, 0x44, 0x4b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x33, 0x2e, 0x35, 0x2e, 0x32, 0x2e, 0x30, 0x2e, 0x39, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3d, 0x32, 0x2e, 0x30, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x3d, 0x38, 0x30, 0x39, 0x36, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x0a, 0x00];
        let msg = FeslMessage::from_read(&mut src).unwrap();
        assert_eq!(msg.get_type().is_err(), true);
    }
}
